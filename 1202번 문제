import java.util.*;
import java.io.*;
import java.math.BigInteger;

public class Main {
	
	public static void main (String args[]) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st;
		
		st = new StringTokenizer(br.readLine());
		
		int n = Integer.parseInt(st.nextToken());
		int k = Integer.parseInt(st.nextToken());
		
		Jewelry[] jewelries = new Jewelry[n];
		for (int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			int m = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			
			jewelries[i] = new Jewelry(m, v);
		}
		
		Arrays.sort(jewelries, new Comparator<Jewelry>() {
		//무게 오름차순 정렬, 무게 같을때 가격 내림차순
			@Override
			public int compare(Jewelry o1, Jewelry o2) {
				if (o1.mass == o2.mass) 
					return o2.value - o1.value;
				return o1.mass - o2.mass;
			}			
		});
		
		int[] bags = new int[k];
		for (int i = 0; i < k; i++) {
			bags[i] = Integer.parseInt(br.readLine());
		}
		
		Arrays.sort(bags);
		
		//우선순위 큐는 항상 가격이 내림차순 정렬
		PriorityQueue<Integer> pq = new PriorityQueue<Integer>(Comparator.reverseOrder());
		long ans = 0;
		for (int i = 0, j = 0; i < k; i++) {
			// 현재 가방의 무게보다 작거나 같은 보석을 우선순위 큐에 넣음.
			while (j < n && jewelries[j].mass <= bags[i]) {
				pq.offer(jewelries[j++].value);
			}
			
			// 우선순위 큐에 있는 요소를 하나 빼서 가방에 넣음.
			// 이때, 우선순위 큐는 내림차순 정렬이 되있으므로
			// 첫 번째 요소는 가장 큰 가격
			
			if (!pq.isEmpty()) {
				ans += pq.poll();
			}
		}
		
		System.out.println(ans + "\n");
		
	}
	
}

class Jewelry {
	
	int mass;
	int value;
	
	Jewelry (int mass, int value) {
		this.mass = mass;
		this.value = value;
	}
	
}
