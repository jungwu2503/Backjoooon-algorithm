import java.io.*;
import java.util.*;

public class Main {
	static int numOfVertex;
	static int numOfEdge;
	static int startVertex;
	static int[][] table;
	static boolean[] visited;
	static Queue<Integer> queue;
	
	public static void main(String[] args) throws Exception {		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		numOfVertex = Integer.parseInt(st.nextToken());
		numOfEdge = Integer.parseInt(st.nextToken());
		startVertex = Integer.parseInt(st.nextToken());
		
		table = new int[1001][1001];
		visited = new boolean[1001];
		
		for (int i = 0; i < numOfEdge; i++) {
			st = new StringTokenizer(br.readLine());
			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());
			
			table[x][y] = table[y][x] = 1;
		}
		dfs(startVertex);
		
		for (int i = 0; i < visited.length; i++) visited[i] = false;
		
		System.out.println();
		bfs(startVertex);
	}	
	
	static void dfs(int start) {
		visited[start] = true;
		System.out.print(start + " ");
		for (int i = 1; i <= numOfVertex; i++) {
			if (visited[i] == false && table[start][i] == 1) {
				dfs(i);
			}
		}
	}
	
	static void bfs(int start) {
		queue = new LinkedList<Integer>();
		queue.add(start);
		visited[start] = true;
		System.out.print(start + " ");
		
		while (!queue.isEmpty()) {
			int data = queue.poll();
			
			for (int i = 1; i < table.length; i++) {
				if (visited[i] == false && table[data][i] == 1) {
					queue.add(i);
					visited[i] = true;
					System.out.print(i + " ");
				}
			}
		}
	}
}
