import java.io.*;
import java.util.*;

class Data implements Comparable<Data> {
	int score;
	int times;
	int lastScore;
	int index;
	
	Data(int score, int times, int lastScore, int i) {
		this.score = score;
		this.times = times;
		this.lastScore = lastScore;
		setIndex(i);
	}
	
	void setIndex(int i) {
		index = i;
	}
	
	int getIndex() {
		return index;
	}

	@Override
	public int compareTo(Data o) {
		if (score < o.score) {
			return 1;
		}
		else if (score > o.score) {
			return -1;
		}
		return compareTimes(o);
	}	
	
	public int compareTimes(Data o) {
		if (times > o.times) {
			return 1;
		}
		else if (times < o.times) {
			return -1;
		}
		return compareLastScore(o);
	}
	
	public int compareLastScore(Data o) {
		if (lastScore > o.lastScore) {
			return 1;
		}
		else if (lastScore < o.lastScore) {
			return -1;
		}
		return 0;
	}
	
	/*public String toString() {
		return "" + score + " " + times + " " + lastScore + " " + index;
	}*/	
}

public class Main {
	
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int n = Integer.parseInt(br.readLine());
		StringTokenizer st;
		ArrayList<Data> dataList = new ArrayList<Data>();
		
		for (int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			int score = Integer.parseInt(st.nextToken());
			int times = Integer.parseInt(st.nextToken());
			int lastScore = Integer.parseInt(st.nextToken());
			dataList.add(new Data(score, times, lastScore, i+1));
		}
		
		Collections.sort(dataList);
		
		/*for (int i = 0; i < n; i++) {
			System.out.println(dataList.get(i));
		}*/
		
		System.out.println(dataList.get(0).getIndex());
	}	
}
