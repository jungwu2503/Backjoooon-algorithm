import java.util.*;
import java.io.*;

public class Main {
	
	public static int[] queue;
	public static int size = 0;
	public static int front = 0;
	public static int back = 0;
	
	public static void main (String args[]) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int n = Integer.parseInt(br.readLine());
		
		StringBuilder sb = new StringBuilder();
		
		StringTokenizer st;
		
		queue = new int[n];
		
		for (int i = 0; i < n; i++) {
			
			st = new StringTokenizer(br.readLine(), " ");
			
			switch (st.nextToken()) {
			
			case "push" :
				push(Integer.parseInt(st.nextToken()));
				break;
			
			case "pop" :
				sb.append(pop()).append('\n');
				break;
				
			case "size" :
				sb.append(size()).append('\n');
				break;
				
			case "empty" :
				sb.append(empty()).append('\n');
				break;
			
			case "front" :
				sb.append(front()).append('\n');
				break;
				
			case "back" :
				sb.append(back()).append('\n');
				break;
				
			
			}
			
		}
		
		System.out.println(sb);
		
		br.close();
	}
	
	public static void push(int item) {
		queue[back] = item;
		back++;
		size++;
	}
	
	public static int pop() {
		
		if (size == 0)
			return -1;
		
		int result = queue[front];
		
		size--;	
		front++;
		
		return result;
	}
	
	public static int size() {
		return size;
	}
	
	public static int empty() {
		if (size == 0)
			return 1;
		else
			return 0;		
	}
	
	public static int front() {
		if (size == 0) 
			return -1;
		
		return queue[front];
	}
	
	public static int back() {
		if (size == 0)
			return -1;
		
		return queue[back-1];
	}
	
}
