import java.io.*;
import java.util.*;

public class Main {
	public static void main(String[] args) throws Exception {		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		
		int[][] map = new int[n][m];
		for (int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < m; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		boolean[][] visited = new boolean[n][m];
		int[] dx = {1, 0, -1, 0};
		int[] dy = {0, 1, 0, -1};
		
		int maxAreaCount = 0;
		int num = 0;
		
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (map[i][j] == 0 || visited[i][j]) continue;
				num++;
				Queue<int[]> queue = new ArrayDeque<int[]>();
				visited[i][j] = true;
				queue.add(new int[] {i, j});
				int area = 0;
				while (!queue.isEmpty()) {
					area++;
					int[] arr = queue.poll();
					int curX = arr[0];
					int curY = arr[1];
					for (int dir = 0; dir < 4; dir++) {
						int nx = curX + dx[dir];
						int ny = curY + dy[dir];
						if (nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
						if (map[nx][ny] == 0 || visited[nx][ny]) continue;
						visited[nx][ny] = true;
						queue.add(new int[] {nx, ny});
					}
					if (maxAreaCount < area) maxAreaCount = area;
				}
			}
		}
		
		System.out.println(num + "\n" + maxAreaCount);
	}
}
