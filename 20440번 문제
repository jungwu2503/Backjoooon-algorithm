import java.io.*;
import java.util.*;

class Time implements Comparable<Time>{
	long start;
	long end;
	
	Time(long s, long e) {
		start = s;
		end = e;
	}

	@Override
	public int compareTo(Time o) {
		if (this.end < o.end) 
			return -1;
		else if (this.end == o.end) {
			if (this.start < o.start)
				return 1;
			else 
				return -1;
		}
		else
			return 1;
	}
}

public class Main { 
	
	public static void main(String[] args) throws Exception {		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		int n = Integer.parseInt(br.readLine());
		PriorityQueue<Time> pQueue = new PriorityQueue<Time>();
		long[][] arr = new long[n][2];
		
		for (int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			arr[i][0] = Long.parseLong(st.nextToken());
			arr[i][1] = Long.parseLong(st.nextToken());
		}
		
		Arrays.sort(arr, (a,b) -> {
			if (a[0] <= b[0])
				return -1;
			else 
				return 1;
		});
		
		int max = -1;
		long start = 0;
		long end = 0;
		
		for (int i = 0; i < n; i++) {
			while (!pQueue.isEmpty() && arr[i][0] > pQueue.peek().end) {
				pQueue.poll();
			}
			if (!pQueue.isEmpty() && arr[i][0] == pQueue.peek().end) {
				if (pQueue.peek().end == end) 
					end = arr[i][1];
				pQueue.poll();
			}
			pQueue.add(new Time(arr[i][0], arr[i][1]));
			if (pQueue.size() > max) {
				max = pQueue.size();
				start = arr[i][0];
				end = pQueue.peek().end;
			}
		}
		
		System.out.println(max);
		System.out.println(start + " " + end);
		
		/*int n = Integer.parseInt(br.readLine());
		int[] section = new int[n];
		
		int start = 0;
		int end = 0;
		int max = -1;
		
		while (n-- > 0) {
			st = new StringTokenizer(br.readLine());
			start = Integer.parseInt(st.nextToken());
			end = Integer.parseInt(st.nextToken());
			
			for (int i = start; i < end; i++) {
				section[i]++;
				if (max < section[i]) max = section[i];
			}
		}
		
		boolean flag = false;
		for (int i = 1; i < section.length; i++) {
			if (section[i] == max && !flag) {
				start = i;
				flag = true;
			}
			if (flag && section[i] != max) {
				end = i;
				break;
			}
		}
		
		System.out.println(max);
		System.out.println(start + " " + end);*/
	}	
}
