import java.io.*;
import java.util.*;

public class Main {
	public static void main(String[] args) throws Exception {		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		int m = Integer.parseInt(st.nextToken());
		int n = Integer.parseInt(st.nextToken());
		
		int answer = 0;
		Queue<int[]> queue = new ArrayDeque<int[]>();
		
		int[][] map = new int[n][m];
		int[][] dist = new int[n][m];
		
		for (int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < m; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if (map[i][j] == 1) queue.add(new int[] {i, j});
				if (map[i][j] == 0)	dist[i][j] = -1;
			}
		}
		
		int[] dx = {1, 0, -1, 0};
		int[] dy = {0, 1, 0, -1};
		
		//queue.add(new int[] {0, 0});
		
		while (!queue.isEmpty()) {
			int[] arr = queue.poll();
			int curX = arr[0];
			int curY = arr[1];
			for (int dir = 0; dir < 4; dir++) {
				int nx = curX + dx[dir];
				int ny = curY + dy[dir];
				if (nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
				if (dist[nx][ny] >= 0) continue;
				dist[nx][ny] = dist[curX][curY]+1;
				queue.add(new int[] {nx, ny});
			}
		}
		
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (dist[i][j] == -1) {
					System.out.println("-1");
					return;
				}
				if (answer < dist[i][j]) answer = dist[i][j];
			}
		}
		
		/*for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				System.out.print(dist[i][j]);
			}
			System.out.println();
		}*/
		
		System.out.println(answer);
	}
}
