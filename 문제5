문제 설명
건축회사 BUFS에서 일하는 건축가 BOJ씨는 주로 건축설계를 담당한다. 그 중에서도 건축물에 대한 유효 하중을 판단하는 일을 한다. 어느 날 BOJ씨의 하중 오판으로 인해 건설 도중 건물이 무너지는 사고가 발생했다. 이에 BOJ씨는 해고위기에 놓였지만, 그 사고로 인명 피해는 전혀 없었고 손해 자산도 그리 크지 않아 다행히도 해고를 당하진 않았다.

이 사건을 계기로 BOJ씨는 두 번 다시 그런 실수가 없도록 자동으로 유효 하중을 판별하는 프로그램을 제작하기로 하였다. 유효 하중에 관련된 유의 사항은 다음과 같다.

건축 자재로 콘크리트, 철강, 나무 세 가지가 사용된다.
각 건축 자재는 블록으로 만들어진다. 재질에 따라 블록의 무게가 다르다.
각 층마다 블록들은 한 덩어리로 결합되고 블록들의 무게의 합이 해당 층의 무게이다.
각 층은 무게의 3배까지 지탱할 수 있다. 즉 유효 하중은 무게의 3배이다.
각 층마다 그 위에 있는 모든 층의 무게를 합한 하중을 견뎌야 한다.
예를 들어, 4층 건축물에서 1층의 무게는 22, 2층의 무게는 16, 3층의 무게는 18, 4층의 무게는 2라고 하자. 1층은 66까지 하중을 견딜 수 있는데 2,3,4층의 무게 합은 36이고, 2층의 유효 하중은 48인데 3,4층의 무게 합은 22이고, 3층의 유효 하중은 54인데 4층의 무게는 2이므로, 이 건축물은 안전하다고 판단된다.

건축물의 각 층을 구성하는 블록들에 대한 정보가 주어질 때, 이 건축물이 안전한지 아닌지를 판별하는 프로그램을 작성하시오.


입력
입력은 표준입력으로 주어진다. 입력의 첫 번째 줄에는 건축물의 층수를 나타내는 정수 N이 주어진다(1≤N≤50). 그 다음 줄에는 콘크리트 블록의 무게, 철강 블록의 무게, 나무 블록의 무게를 나타내는 3개의 정수가 빈칸을 사이에 두고 주어진다. 이 정수는 1 이상 10,000 이하이다. 그 다음 N개의 줄에는 1층부터 N층까지 순서대로 각 층을 구성하는 블록들에 대한 정보가 한 줄에 한 층씩 주어진다. 각 줄마다 콘크리트 블록은 c, 철강 블록은 h, 나무 블록은 w로 표시되며 이 문자들이 빈칸 없이 연속된 문자열로 주어진다. 문자열의 길이는 1 이상 100 이하이다.


출력
출력은 표준출력으로 한다. 출력의 첫 줄에 건축물이 안전하면, 즉 하중 테스트를 통과하면 Y, 그렇지 않으면 N을 출력한다.


입력 예시 1
2
2 5 1
ww
ch
출력 예시 1
N
입력 예시 2
4
2 4 1
chwhhwhc
hhhh
hwhhwh
ww
출력 예시 2
Y

import java.io.*;
import java.util.*;

public class Main {

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int n = Integer.parseInt(br.readLine());
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		int c = Integer.parseInt(st.nextToken());
		int h = Integer.parseInt(st.nextToken());
		int w = Integer.parseInt(st.nextToken());
		
		int[] weight = new int[n];
		
		for (int i = 0; i < n; i++) {
			String str = br.readLine();
			
			for (int j = 0; j < str.length(); j++) {
				switch(str.charAt(j)) {
					case 'c':
						weight[i] += c;
						break;
					case 'h':
						weight[i] += h;
						break;
					case 'w':
						weight[i] += w;
						break;
				}
			}
			//System.out.println(weight[i]);
		}
		
		boolean ans = false;
		int compare = 0;
		for (int i = 0; i < n-1; i++) {			
			for (int j = i+1; j < n; j++) {
				compare += weight[j];
			}
			if (weight[i]*3 > compare) {
				ans = true;
				break;
			}
		}
		
		if (ans || n==1) System.out.println("Y");
		else System.out.println("N");
	}


}
