class Solution {
    public int solution(int[][] board) {
        int n = board.length;
        boolean[][] safetyZone = new boolean[n][n];
        int[] dx = {-1, 0, 1, -1, 1, -1, 0, 1};
        int[] dy = {-1, 1, 1, 0, -1, 1, -1, 0};
        //int[] dx = {-1, 0, 1, 0, -1, 1, -1, 1};
        //int[] dy = {0, 1, 0, -1, -1, -1, 1, 1};
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                
                for (int k = 0; k < 8; k++) {
                    //if (i-1 < 0 || i+1 == n || j-1 < 0 || j+1 == n) continue;
                    int nx = i + dx[k];
                    int ny = j + dy[k];
                    if (board[i][j] == 1) safetyZone[i][j] = true;
                    if (nx >= 0 && nx < n && ny >= 0 && ny < n && board[nx][ny] == 1)
                        safetyZone[i][j] = true;
                }                
                 
            }
        }
        
        int answer = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (!safetyZone[i][j]) answer++;
            }
        }
        
        return answer;
    }
}

/*
class Solution {
    public int solution(int[][] board) {
        int n = board.length;
        boolean[][] safetyZone = new boolean[n][n];
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 1) {
                    if (i-1 < 0 || i+1 == n || j-1 < 0 || j+1 == n) continue;
                    if (i-1 < 0 && j-1 < 0) {
                        safetyZone[i][j] = true;
                        safetyZone[i+1][j] = true;
                        safetyZone[i][j+1] = true;
                        safetyZone[i+1][j+1] = true;
                    }
                    else if (i+1 == n && j+1 == n) {
                        safetyZone[i][j] = true;
                        safetyZone[i-1][j-1] = true;
                        safetyZone[i][j-1] = true;
                        safetyZone[i-1][j] = true;
                    }
                    else if (i-1 < 0) {
                        safetyZone[i][j] = true;
                        safetyZone[i+1][j] = true;
                        safetyZone[i][j-1] = true;
                        safetyZone[i][j+1] = true;
                        safetyZone[i+1][j-1] = true;
                        safetyZone[i+1][j+1] = true;
                    }
                    else if (i + 1 == n) {
                        safetyZone[i][j] = true;
                        safetyZone[i-1][j] = true;
                        safetyZone[i][j-1] = true;
                        safetyZone[i][j+1] = true;
                        safetyZone[i-1][j-1] = true;
                        safetyZone[i-1][j+1] = true;                        
                    }
                    else if (j-1 < 0) {
                        safetyZone[i][j] = true;
                        safetyZone[i-1][j] = true;
                        safetyZone[i+1][j] = true;
                        safetyZone[i][j+1] = true;
                        safetyZone[i-1][j+1] = true;
                        safetyZone[i+1][j+1] = true;                        
                    }
                    else if (j+1 == n) {
                        safetyZone[i][j] = true;
                        safetyZone[i-1][j] = true;
                        safetyZone[i+1][j] = true;
                        safetyZone[i][j-1] = true;
                        safetyZone[i-1][j-1] = true;
                        safetyZone[i+1][j-1] = true;
                    }
                    else {
                        safetyZone[i][j] = true;
                        safetyZone[i-1][j] = true;
                        safetyZone[i+1][j] = true;
                        safetyZone[i][j-1] = true;
                        safetyZone[i][j+1] = true;
                        safetyZone[i-1][j-1] = true;
                        safetyZone[i-1][j+1] = true;
                        safetyZone[i+1][j-1] = true;
                        safetyZone[i+1][j+1] = true;
                    }
                }
            }
        }
        
        int answer = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (!safetyZone[i][j]) answer++;
            }
        }
        
        return answer;
    }
}
*/
